브랜치 : 깃허브에 등록된 작업공간, 다중 생성이 가능. 깃허브로 협업이 가능하도록 돕는 기능.

1. 깃허브 초기설정
	1) 클론으로 깃허브 원격 레파지토리 연결
	git clone 'https://github.com/jomoonseok/Semi2.git'   --> main 브랜치에 있는 최신 버전을 로컬으로 가져온다.

	2) 깃허브에 각자의 브랜치 생성
	git branch '생성할 브랜치명'                               	  --> 깃허브에서 사용할 브랜치를 등록한다.  * 최초 1회만 수행 *
									  --> 최신버전이 로컬에 적용된 상태라 별도의 명령 필요없음.

2. 코드 수정 후 각자의 브랜치에 파일 업로드
	1) 각자의 브랜치로 이동 ★
	git checkout '각자의 브랜치명' 				  --> git bash의 포커스가 각자의 브랜치로 이동
	
	2) 브랜치로 코드 변경사항 업로드 준비-1			  
	git add .							  --> 코드 변경사항을 자신의 브랜치로 업로드하기전 1차 준비(스테이징).

	3) 브랜치로 코드 변경사항 업로드 준비-2			  
	git commit -m '등록일시/주요변경내용' 		  --> 코드 변경사항을 자신의 브랜치로 업로드하기전 2차 준비(커밋).

	4) 자신의 브랜치에 코드 변경사항 업로드 ★
	git push origin '각자의 브랜치명' 			  --> 각자의 브랜치로 코드 변경사항 업로드


3. 브랜치에 업로드된 파일 다운로드
	git pull origin '각자의 브랜치명'				  --> 각자의 브랜치에 저장되어 있는 최신파일 다운로드

========================================================================================
누군가가 main 브랜치에 최신버전의 파일을 push해서 main에 등록된 파일이 새롭게 변경된 상황
========================================================================================
git checkout '각자의 브랜치'
git add .								  --> 코드 변경사항을 자신의 브랜치로 업로드하기전 1차 준비(스테이징).		
git commit -m ''							  --> 코드 변경사항을 자신의 브랜치로 업로드하기전 2차 준비(커밋).
git checkout main							  --> git bash의 포커스가 메인 브랜치로 이동.
git pull origin main							  --> 메인에 등록되어있는 최신 버전의 파일을 로컬로 다운로드.

git checkout '각자의 브랜치명'					  --> git bash의 포커스가 각자의 브랜치로 이동.
git merge main 							  --> main에서 다운로드한 최신버전의 파일과 각자의 브랜치가 병합.
